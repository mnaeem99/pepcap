import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { UsersService } from '../users.service';
import { IUsers
 } from '../iusers';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';


@Component({
  selector: 'app-users-details',
  templateUrl: './users-details.component.html',
  styleUrls: ['./users-details.component.scss']
})
export class UsersDetailsComponent extends BaseDetailsComponent<IUsers> implements OnInit {
	title = 'Users';
	parentUrl = 'users';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public usersService: UsersService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, usersService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Users';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      createdAt: [''],
	  createdAtTime: [''],
      email: ['', Validators.required],
      firstName: ['', Validators.required],
      id: [{value: '', disabled: true}, Validators.required],
      isActive: [false, Validators.required],
	  isEmailConfirmed: [{value: false, disabled: true}],  
      lastName: ['', Validators.required],
      phoneNumber: [''],
      role: ['', Validators.required],
      updatedAt: [''],
	  updatedAtTime: [''],
      username: ['', Validators.required],
      
    });
    
    this.fields = [
        {
		  name: 'username',
		  label: 'username',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'updatedAt',
		  label: 'updated At',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Date,
		},
		{
		  name: 'updatedAtTime',
		  label: 'updated At Time',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Time
	    },
        {
		  name: 'role',
		  label: 'role',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'phoneNumber',
		  label: 'phone Number',
		  isRequired: false,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'lastName',
		  label: 'last Name',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'isEmailConfirmed',
		  label: 'is Email Confirmed',
		  isRequired: false,
		  isAutoGenerated: false,
          type: FieldType.Boolean,
	    },
        {
		  name: 'isActive',
		  label: 'is Active',
		  isRequired: true,
		  isAutoGenerated: false,
          type: FieldType.Boolean,
	    },
        {
		  name: 'firstName',
		  label: 'first Name',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'email',
		  label: 'email',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'createdAt',
		  label: 'created At',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Date,
		},
		{
		  name: 'createdAtTime',
		  label: 'created At Time',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Time
	    },
      ];
      
  }
  
  onItemFetched(item: IUsers) {
    this.item = item;
    this.itemForm.get('createdAt')?.setValue(item.createdAt? new Date(item.createdAt): null);
    this.itemForm.get('createdAtTime')?.setValue(this.usersService.formatDateStringToAMPM(item.createdAt));
    this.itemForm.get('updatedAt')?.setValue(item.updatedAt? new Date(item.updatedAt): null);
    this.itemForm.get('updatedAtTime')?.setValue(this.usersService.formatDateStringToAMPM(item.updatedAt));
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'assigneeId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: true,
		table: 'tasks',
		type: 'OneToMany',
		label: 'tasks',
		},
      {
        column: [
	        {
	          key: 'userId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: true,
		table: 'timesheets',
		type: 'OneToMany',
		label: 'timesheets',
		},
			{
				column: [
					{
						key: 'usersId',
						value: undefined,
						referencedkey: 'id'
					},
				],
				isParent: true,
				table: 'userspermission',
				type: 'OneToMany',
				label: 'Userpermissions',
			},
			{
		        column: [
					{
						key: 'usersId',
						value: undefined,
						referencedkey: 'id'
					},
		        ],
		        isParent: true,
		        table: 'usersrole',
		        type: 'OneToMany',
				label: 'Userroles',
		    },
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let users = this.itemForm.getRawValue();


	    users.createdAt = this.dataService.combineDateAndTime(users.createdAt, users.createdAtTime);
	    delete users.createdAtTime;
	    users.updatedAt = this.dataService.combineDateAndTime(users.updatedAt, users.updatedAtTime);
	    delete users.updatedAtTime;

        super.onSubmit(users);
	}
}
