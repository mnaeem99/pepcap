import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { TimesheetsService } from '../timesheets.service';
import { ITimesheets
 } from '../itimesheets';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { TasksService } from 'src/app/entities/tasks/tasks.service';
import { UsersService } from 'src/app/admin/user-management/users/users.service';

@Component({
  selector: 'app-timesheets-details',
  templateUrl: './timesheets-details.component.html',
  styleUrls: ['./timesheets-details.component.scss']
})
export class TimesheetsDetailsComponent extends BaseDetailsComponent<ITimesheets> implements OnInit {
	title = 'Timesheets';
	parentUrl = 'timesheets';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public timesheetsService: TimesheetsService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
		public tasksService: TasksService,
		public usersService: UsersService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, timesheetsService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Timesheets';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      createdAt: [''],
	  createdAtTime: [''],
      date: ['', Validators.required],
      hoursWorked: ['', Validators.required],
      id: [{value: '', disabled: true}, Validators.required],
      taskId: [''],
      tasksDescriptiveField : [''],
      userId: [''],
      usersDescriptiveField : [''],
      
    });
    
    this.fields = [
        {
		  name: 'hoursWorked',
		  label: 'hours Worked',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.Number,
	    },
        {
		  name: 'date',
		  label: 'date',
		  isRequired: true,
		  isAutoGenerated: false,
		  type: FieldType.Date,
	    },
        {
		  name: 'createdAt',
		  label: 'created At',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Date,
		},
		{
		  name: 'createdAtTime',
		  label: 'created At Time',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Time
	    },
      ];
      
  }
  
  onItemFetched(item: ITimesheets) {
    this.item = item;
    this.itemForm.get('createdAt')?.setValue(item.createdAt? new Date(item.createdAt): null);
    this.itemForm.get('createdAtTime')?.setValue(this.timesheetsService.formatDateStringToAMPM(item.createdAt));
    this.itemForm.get('date')?.setValue(item.date? new Date(item.date): null);
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'taskId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: false,
		table: 'tasks',
		type: 'ManyToOne',
		label: 'tasks',
		service: this.tasksService,
		descriptiveField: 'tasksDescriptiveField',
	    referencedDescriptiveField: 'id',
		},
      {
        column: [
	        {
	          key: 'userId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: false,
		table: 'users',
		type: 'ManyToOne',
		label: 'users',
		service: this.usersService,
		descriptiveField: 'usersDescriptiveField',
	    referencedDescriptiveField: 'id',
		},
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let timesheets = this.itemForm.getRawValue();


	    timesheets.createdAt = this.dataService.combineDateAndTime(timesheets.createdAt, timesheets.createdAtTime);
	    delete timesheets.createdAtTime;

        super.onSubmit(timesheets);
	}
}
