import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { ProjectsService } from '../projects.service';
import { IProjects
 } from '../iprojects';
import { BaseDetailsComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';


@Component({
  selector: 'app-projects-details',
  templateUrl: './projects-details.component.html',
  styleUrls: ['./projects-details.component.scss']
})
export class ProjectsDetailsComponent extends BaseDetailsComponent<IProjects> implements OnInit {
	title = 'Projects';
	parentUrl = 'projects';
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public projectsService: ProjectsService,
		public pickerDialogService: PickerDialogService,
		public errorService: ErrorService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, pickerDialogService, projectsService, errorService);
  }

	ngOnInit() {
		this.entityName = 'Projects';
		this.setAssociations();
		super.ngOnInit();
		this.setForm();
    	this.getItem();
	}
  
  setForm(){
    this.itemForm = this.formBuilder.group({
      createdAt: [''],
	  createdAtTime: [''],
      description: [''],
      endDate: [''],
      id: [{value: '', disabled: true}, Validators.required],
      name: ['', Validators.required],
      startDate: [''],
      status: [''],
      
    });
    
    this.fields = [
        {
		  name: 'status',
		  label: 'status',
		  isRequired: false,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'startDate',
		  label: 'start Date',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Date,
	    },
        {
		  name: 'name',
		  label: 'name',
		  isRequired: true,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'endDate',
		  label: 'end Date',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Date,
	    },
        {
		  name: 'description',
		  label: 'description',
		  isRequired: false,
		  isAutoGenerated: false,
	      type: FieldType.String,
	    },
        {
		  name: 'createdAt',
		  label: 'created At',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Date,
		},
		{
		  name: 'createdAtTime',
		  label: 'created At Time',
		  isRequired: false,
		  isAutoGenerated: false,
		  type: FieldType.Time
	    },
      ];
      
  }
  
  onItemFetched(item: IProjects) {
    this.item = item;
    this.itemForm.get('createdAt')?.setValue(item.createdAt? new Date(item.createdAt): null);
    this.itemForm.get('createdAtTime')?.setValue(this.projectsService.formatDateStringToAMPM(item.createdAt));
    this.itemForm.get('endDate')?.setValue(item.endDate? new Date(item.endDate): null);
    this.itemForm.get('startDate')?.setValue(item.startDate? new Date(item.startDate): null);
     this.itemForm.patchValue(item);

  }
  
  setAssociations(){
    this.associations = [
      {
        column: [
	        {
	          key: 'projectId',
	          value: undefined,
	          referencedkey: 'id'
			},
		],
		isParent: true,
		table: 'tasks',
		type: 'OneToMany',
		label: 'tasks',
		},
		];
		
		this.childAssociations = this.associations.filter(association => {
			return (association.isParent);
		});

		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});
	}
	
	onSubmit() {
		let projects = this.itemForm.getRawValue();


	    projects.createdAt = this.dataService.combineDateAndTime(projects.createdAt, projects.createdAtTime);
	    delete projects.createdAtTime;

        super.onSubmit(projects);
	}
}
