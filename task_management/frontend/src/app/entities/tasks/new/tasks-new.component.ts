import { Component, OnInit, Inject } from '@angular/core';
import { ActivatedRoute,Router} from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { TasksService } from '../tasks.service';
 import { ITasks
 } from '../itasks';
import { BaseNewComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';

import { ProjectsService } from 'src/app/entities/projects/projects.service';
import { UsersService } from 'src/app/admin/user-management/users/users.service';

@Component({
  selector: 'app-tasks-new',
  templateUrl: './tasks-new.component.html',
  styleUrls: ['./tasks-new.component.scss']
})
export class TasksNewComponent extends BaseNewComponent<ITasks> implements OnInit {
  
    title:string = "New Tasks";
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public dialogRef: MatDialogRef<TasksNewComponent>,
		@Inject(MAT_DIALOG_DATA) public data: any,
		public pickerDialogService: PickerDialogService,
		public tasksService: TasksService,
		public errorService: ErrorService,
		public projectsService: ProjectsService,
		public usersService: UsersService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, dialogRef, data, pickerDialogService, tasksService, errorService);
	}
 
		ngOnInit() {
		this.entityName = 'Tasks';
		this.setAssociations();
		super.ngOnInit();
    	this.setForm();
		this.checkPassedData();
        }


	setForm(){
 		this.itemForm = this.formBuilder.group({
      createdAt: [''],
	  createdAtTime: ['12:00 AM'],
      description: [''],
      dueDate: [''],
      name: ['', Validators.required],
      status: [''],
      projectId: [''],
      projectsDescriptiveField: [''],
      assigneeId: [''],
      usersDescriptiveField: [''],
    });
    
    this.fields = [
              {
      		  name: 'status',
      		  label: 'status',
      		  isRequired: false,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'name',
      		  label: 'name',
      		  isRequired: true,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'dueDate',
      		  label: 'due Date',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Date,
      	    },
              {
      		  name: 'description',
      		  label: 'description',
      		  isRequired: false,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'createdAt',
      		  label: 'created At',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Date,
      		},
      		{
      		  name: 'createdAtTime',
      		  label: 'created At Time',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Time
      	    },
		];
	}
	 
	setAssociations(){
  	
		this.associations = [
			{
				column: [
					{
						key: 'projectId',
						value: undefined,
						referencedkey: 'id'
					},
					  
				],
				isParent: false,
				table: 'projects',
				type: 'ManyToOne',
				service: this.projectsService,
				label: 'projects',
				descriptiveField: 'projectsDescriptiveField',
				referencedDescriptiveField: 'id',
		    
			},
			{
				column: [
					{
						key: 'assigneeId',
						value: undefined,
						referencedkey: 'id'
					},
					  
				],
				isParent: false,
				table: 'users',
				type: 'ManyToOne',
				service: this.usersService,
				label: 'users',
				descriptiveField: 'usersDescriptiveField',
				referencedDescriptiveField: 'id',
		    
			},
		];
		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});

	}
	
	onSubmit() {
		let tasks = this.itemForm.getRawValue();


	    tasks.createdAt = this.dataService.combineDateAndTime(tasks.createdAt, tasks.createdAtTime);
	    delete tasks.createdAtTime;

        super.onSubmit(tasks);

	}
    
}
