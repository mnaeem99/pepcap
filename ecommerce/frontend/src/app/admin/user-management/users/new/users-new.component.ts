import { Component, OnInit, Inject } from '@angular/core';
import { ActivatedRoute,Router} from "@angular/router";
import { FormArray, FormBuilder, FormControl, Validators } from '@angular/forms';
import { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { UsersService } from '../users.service';
 import { IUsers
 } from '../iusers';
import { BaseNewComponent, FieldType, PickerDialogService } from 'src/app/common/shared';
import { ErrorService } from 'src/app/core/services/error.service';
import { GlobalPermissionService } from 'src/app/core/services/global-permission.service';


@Component({
  selector: 'app-users-new',
  templateUrl: './users-new.component.html',
  styleUrls: ['./users-new.component.scss']
})
export class UsersNewComponent extends BaseNewComponent<IUsers> implements OnInit {
  
    title:string = "New Users";
	constructor(
		public formBuilder: FormBuilder,
		public router: Router,
		public route: ActivatedRoute,
		public dialog: MatDialog,
		public dialogRef: MatDialogRef<UsersNewComponent>,
		@Inject(MAT_DIALOG_DATA) public data: any,
		public pickerDialogService: PickerDialogService,
		public usersService: UsersService,
		public errorService: ErrorService,
		public globalPermissionService: GlobalPermissionService,
	) {
		super(formBuilder, router, route, dialog, dialogRef, data, pickerDialogService, usersService, errorService);
	}
 
		ngOnInit() {
		this.entityName = 'Users';
		this.setAssociations();
		super.ngOnInit();
    	this.setForm();
		this.checkPassedData();
        }


	setForm(){
 		this.itemForm = this.formBuilder.group({
      createdAt: [''],
	  createdAtTime: ['12:00 AM'],
      email: ['', Validators.required],
      firstName: ['', Validators.required],
      isActive: [false, Validators.required],
      lastName: ['', Validators.required],
      password: ['', Validators.required],
      phoneNumber: [''],
      role: ['', Validators.required],
      updatedAt: [''],
	  updatedAtTime: ['12:00 AM'],
      username: ['', Validators.required],
      confirmPassword: ['', Validators.required],
    });
    
    this.fields = [
              {
      		  name: 'username',
      		  label: 'username',
      		  isRequired: true,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'updatedAt',
      		  label: 'updated At',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Date,
      		},
      		{
      		  name: 'updatedAtTime',
      		  label: 'updated At Time',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Time
      	    },
              {
      		  name: 'role',
      		  label: 'role',
      		  isRequired: true,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'phoneNumber',
      		  label: 'phone Number',
      		  isRequired: false,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'lastName',
      		  label: 'last Name',
      		  isRequired: true,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'isEmailConfirmed',
      		  label: 'is Email Confirmed',
      		  isRequired: false,
      		  isAutoGenerated: false,
                type: FieldType.Boolean,
      	    },
              {
      		  name: 'isActive',
      		  label: 'is Active',
      		  isRequired: true,
      		  isAutoGenerated: false,
                type: FieldType.Boolean,
      	    },
              {
      		  name: 'firstName',
      		  label: 'first Name',
      		  isRequired: true,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'email',
      		  label: 'email',
      		  isRequired: true,
      		  isAutoGenerated: false,
      	      type: FieldType.String,
      	    },
              {
      		  name: 'createdAt',
      		  label: 'created At',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Date,
      		},
      		{
      		  name: 'createdAtTime',
      		  label: 'created At Time',
      		  isRequired: false,
      		  isAutoGenerated: false,
      		  type: FieldType.Time
      	    },
		];
	}
	 
	setAssociations(){
  	
		this.associations = [
		];
		this.parentAssociations = this.associations.filter(association => {
			return (!association.isParent);
		});

	}
	
	onSubmit() {
		let users = this.itemForm.getRawValue();


	    users.createdAt = this.dataService.combineDateAndTime(users.createdAt, users.createdAtTime);
	    delete users.createdAtTime;
	    users.updatedAt = this.dataService.combineDateAndTime(users.updatedAt, users.updatedAtTime);
	    delete users.updatedAtTime;

        super.onSubmit(users);

	}
    
}
